aes(x = well, y = norm_int, fill = area) +
geom_boxplot(outlier.shape = NA) +
scale_fill_viridis() +
geom_jitter(width = .2, alpha = .5, size =4, pch = 21) +
theme_bw() +
labs(fill = "worm area", x = "Well", y = "Normalize intensity\n(integrated intensity / worm area)") +
theme(title = element_text(size = 12, color = "black", face = "bold"),
axis.title = element_text(size = 12, color = "black", face = "bold"),
axis.text = element_text(size = 12, color = "black"),
legend.text = element_text(size = 12, color = "black"),
strip.text.x = element_text(size = 12, colour = "black"))
full <- cowplot::plot_grid(intensity, norm_intensity)
full
norm_intensity <- ggplot(proc_dat) +
aes(x = well, y = norm_int, fill = area) +
geom_boxplot(outlier.shape = NA) +
scale_fill_viridis() +
geom_jitter(width = .2, alpha = .5, size =4, pch = 21) +
theme_bw() +
labs(fill = "worm area", x = "Well", y = "Normalize intensity\n(integrated intensity / worm area)") +
theme(title = element_text(size = 12, color = "black", face = "bold"),
axis.title = element_text(size = 12, color = "black", face = "bold"),
axis.text = element_text(size = 12, color = "black"),
legend.text = element_text(size = 12, color = "black"),
strip.text.x = element_text(size = 12, colour = "black"))
norm_intensity
full
full <- cowplot::plot_grid(intensity, norm_intensity, rel_widths = c(0.75,1))
full
full <- cowplot::plot_grid(intensity, norm_intensity, rel_widths = c(0.66,1))
full
full <- cowplot::plot_grid(intensity, norm_intensity, rel_widths = c(0.7,1))
full
ggsave('full_plot.pdf', width = 7.5, height = 5)
norm_intensity <- ggplot(proc_dat) +
aes(x = well, y = norm_int, fill = area) +
geom_boxplot(outlier.shape = NA) +
scale_fill_viridis() +
geom_jitter(width = .2, alpha = .5, size =4, pch = 21) +
theme_bw() +
labs(fill = "worm area", x = "Well", y = "Normalize intensity\n(integrated intensity / worm area)") +
theme(title = element_text(size = 12, color = "black", face = "bold"),
axis.title = element_text(size = 12, color = "black", face = "bold"),
axis.text = element_text(size = 12, color = "black"),
legend.text = element_text(size = 12, color = "black"),
strip.text.x = element_text(size = 12, colour = "black"))
norm_intensity
ggsave('norm_intensity_plot.pdf', width = 5, height = 5)
ggsave('norm_intensity_plot.png', width = 5, height = 5)
getwd()
ww_df <- data.table::fread('~/Dropbox/AndersenLab/LabFolders/Tim/projects/WorMotel/data//Users/tim/Dropbox/AndersenLab/LabFolders/Tim/projects/WorMotel/data/2019-05-24_AllDataLongFormat.csv', header = T)
ww_df <- data.table::fread('~/Dropbox/AndersenLab/LabFolders/Tim/projects/WorMotel/data//Users/tim/Dropbox/AndersenLab/LabFolders/Tim/projects/WorMotel/data/2019-05-24_AllDataLongFormat.csv', header = T)
getwd()
ww_df <- data.table::fread('~/Dropbox/AndersenLab/LabFolders/Tim/projects/WorMotel/data/20190430_wormwatcher_1.csv', header = T)
ww_df <- data.table::fread('~/Dropbox/AndersenLab/LabFolders/Tim/projects/WorMotel/data/2019-05-24_AllDataLongFormat.csv', header = T)
lm_df <- data.table::fread('~/Dropbox/AndersenLab/LabFolders/Tim/projects/WorMotel/data/CeNDR_lifespans.csv', header = T)
H2.test.boot <- function(data, indicies){
d <- data[indicies,]
pheno <- as.data.frame(dplyr::select(d, phenotype))[,1]
strain <- as.factor(d$strain)
reffMod <- lme4::lmer(pheno ~ 1 + (1|strain))
Variances <- as.data.frame(lme4::VarCorr(reffMod, comp = "Variance"))
Vg <- Variances$vcov[1]
Ve <- Variances$vcov[2]
H2 <- Vg/(Vg+Ve)
# errors <- sqrt(diag(lme4::VarCorr(reffMod, comp = "Variance")$strain))
return(H2)
}
H2.test <- function(data){
pheno <- as.data.frame(dplyr::select(data, phenotype))[,1]
strain <- as.factor(data$strain)
reffMod <- lme4::lmer(pheno ~ 1 + (1|strain))
Variances <- as.data.frame(lme4::VarCorr(reffMod, comp = "Variance"))
Vg <- Variances$vcov[1]
Ve <- Variances$vcov[2]
H2 <- Vg/(Vg+Ve)
# errors <- sqrt(diag(lme4::VarCorr(reffMod, comp = "Variance")$strain))
return(H2)
}
H2.calc <- function(df, boot = T){
if(boot == T){
# bootstrapping with 1000 replications
results <- boot(data=df, statistic=H2.test.boot, R=500)
# get 95% confidence interval
ci <- boot.ci(results, type="bca")
H2_errors <- data.frame(H2 = ci$t0, ci_l = ci$bca[4], ci_r = ci$bca[5])
return(H2_errors)
} else {
H2 <- data.frame(H2 = H2.test(data = df), ci_l = NA, ci_r = NA)
return(H2)
}
}
remove_outliers <- function(x, na.rm = TRUE, ...) {
qnt <- quantile(x, probs=c(.25, .75), na.rm = na.rm, ...)
H <- 1.5 * IQR(x, na.rm = na.rm)
y <- x
y[x < (qnt[1] - H)] <- NA
y[x > (qnt[2] + H)] <- NA
y
}
View(ww_df)
ww_df_proc <- ww_df %>%
dplyr::rename( strain = Strain,
Plate_Num = `Plate Num`,
ls = `Lifespan est (days)`,
hs = `Healthspan est (days)`,
t = `Time (days)`,
act = `Activity (a.u.)`) %>%
dplyr::distinct(Plate_Num, Plate_Name, strain, Well_Num, .keep_all = T) %>%
dplyr::filter(ls != "NaN") %>%
#dplyr::mutate(indicies = seq(1, length(t), by = 1)) %>%
dplyr::group_by(strain) %>%
dplyr::mutate(reps = n(),
median_ls = median(ls),
median_hs = median(hs)) %>%
dplyr::ungroup() %>%
tidyr::gather(trait, phenotype, -Plate_Num, -Plate_Name, -Well_Num, -strain, -t, -act, -reps, -median_ls, -median_hs) %>%
dplyr::arrange(median_hs)
library(ggplot2)
library(dplyr)
library(viridis)
library(boot)
ww_df_proc <- ww_df %>%
dplyr::rename( strain = Strain,
Plate_Num = `Plate Num`,
ls = `Lifespan est (days)`,
hs = `Healthspan est (days)`,
t = `Time (days)`,
act = `Activity (a.u.)`) %>%
dplyr::distinct(Plate_Num, Plate_Name, strain, Well_Num, .keep_all = T) %>%
dplyr::filter(ls != "NaN") %>%
#dplyr::mutate(indicies = seq(1, length(t), by = 1)) %>%
dplyr::group_by(strain) %>%
dplyr::mutate(reps = n(),
median_ls = median(ls),
median_hs = median(hs)) %>%
dplyr::ungroup() %>%
tidyr::gather(trait, phenotype, -Plate_Num, -Plate_Name, -Well_Num, -strain, -t, -act, -reps, -median_ls, -median_hs) %>%
dplyr::arrange(median_hs)
View(ww_df_proc)
ww_df_proc_outliers_removed <- ww_df_proc %>%
dplyr::group_by(strain, trait) %>%
dplyr::mutate(phenotype = remove_outliers(phenotype)) %>%
dplyr::ungroup() %>%
dplyr::filter(!is.na(phenotype))
ww_df_proc <- ww_df_proc %>%
dplyr::group_by(strain, trait) %>%
dplyr::mutate(outlier = (remove_outliers(phenotype)),
outlier = ifelse(is.na(outlier), TRUE, FALSE)) %>%
dplyr::ungroup()
ww_df_H2_ls <- ww_df_proc %>%
dplyr::filter(trait == "ls")
ww_df_H2_hs <- ww_df_proc %>%
dplyr::filter(trait == "hs")
ww_df_H2_ls_outliers_removed <- ww_df_proc_outliers_removed %>%
dplyr::filter(trait == "ls")
ww_df_H2_hs_outliers_removed <- ww_df_proc_outliers_removed %>%
dplyr::filter(trait == "hs")
ww_ls_h2 <- H2.calc(ww_df_H2_ls, boot = T)
ww_hs_h2 <- H2.calc(ww_df_H2_hs, boot = T)
ww_ls_h2_outliers_removed <- H2.calc(ww_df_H2_ls_outliers_removed, boot = T)
ww_hs_h2_outliers_removed <- H2.calc(ww_df_H2_hs_outliers_removed, boot = T)
View(ww_hs_h2)
ww_ls_h2_full <- bind_rows(ww_ls_h2, ww_ls_h2_outliers_removed) %>%
dplyr::mutate(trait = as.factor(c("WW_LS","WW_LS no outliers")))
ww_hs_h2_full <- bind_rows(ww_hs_h2, ww_hs_h2_outliers_removed) %>%
dplyr::mutate(trait = as.factor(c("WW_HS","WW_HS no outliers")))
ww_ls_h2_plot <- ggplot(ww_ls_h2_full) +
geom_point(aes(x = trait, y = H2), size = 3) +
geom_errorbar(aes(ymin=ci_l, ymax=ci_r, x = trait), colour="black", width=0.05) +
labs(x = "", y = "Heritability") +
ylim(0, 1) +
theme_bw()+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ww_hs_h2_plot <- ggplot(ww_hs_h2_full) +
geom_point(aes(x = trait, y = H2), size = 3) +
geom_errorbar(aes(ymin=ci_l, ymax=ci_r, x = trait), colour="black", width=0.05) +
labs(x = "", y = "Heritability") +
ylim(0, 1) +
theme_bw()+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ww_design <- ww_df_proc %>%
dplyr::mutate(row = ifelse(Well_Num %in% c(1:6), "A",
ifelse(Well_Num %in% c(7:12), "B",
ifelse(Well_Num %in% c(13:18), "C", "D"))),
column = ifelse(Well_Num %in% c(1,7,13,19), 1,
ifelse(Well_Num %in% c(2,8,14,20), 2,
ifelse(Well_Num %in% c(3,9,15,21), 3,
ifelse(Well_Num %in% c(4,10,16,22), 4,
ifelse(Well_Num %in% c(5,11,17,23), 5, 6))))))
ww_design_plot <- ggplot(ww_design %>% dplyr::filter(trait == "ls")) +
aes(x = column, y = row) +
geom_tile(aes(fill = as.numeric(phenotype))) +
geom_text(aes(label=strain), size = 2) +
facet_wrap(~Plate_Name) +
theme_bw() +
scale_fill_viridis(name="") +
labs(x="", y="")
ww_design_plot
median_ls_order <- c("DL238",   "N2", "JU775",
"MY16",    "CX11314", "ED3017",
"LKC34",   "JU258",   "JT11398",
"CB4856",  "EG4725", "MY23")
median_hs_order <- c("JU775",   "DL238",   "N2",
"JU258",   "ED3017",  "JT11398",
"CX11314", "MY16",    "LKC34",
"CB4856",  "MY23",    "EG4725")
ww_ls <- ggplot(ww_df_proc %>% dplyr::filter(trait == "ls")) +
aes(x=factor(strain, levels = median_ls_order), y=phenotype, fill=strain) +
scale_fill_manual(values = strain.colours) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = .25, shape = 21) +
labs(x="", y="WW_Lifespan") +
theme_bw() +
theme(legend.position = "none") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ww_hs <- ggplot(ww_df_proc %>% dplyr::filter(trait == "hs")) +
aes(x=factor(strain, levels = median_hs_order), y=phenotype, fill=strain) +
scale_fill_manual(values = strain.colours) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = .25, shape = 21) +
labs(x="", y="WW_Healthspan") +
theme_bw() +
theme(legend.position = "none") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
full_ww <- cowplot::plot_grid(ww_ls, ww_ls_h2_plot, ww_hs, ww_hs_h2_plot,
rel_widths = c(1, .25), ncol = 2, align = "vh", labels = c("A","", "B",""))
full_ww
strain.colours <- c("DL238"="gold2", "N2"="plum4","JU775"= "darkorange1",
"MY16"="lightskyblue2", "CX11314"="firebrick","ED3017"= "burlywood3", "LKC34"="gray51",
"JU258"="springgreen4", "JT11398"="lightpink2", "CB4856"="deepskyblue4",
"MY23"="mediumpurple4","EG4725"= "chocolate")
median_ls_order <- c("DL238",   "N2", "JU775",
"MY16",    "CX11314", "ED3017",
"LKC34",   "JU258",   "JT11398",
"CB4856",  "EG4725", "MY23")
median_hs_order <- c("JU775",   "DL238",   "N2",
"JU258",   "ED3017",  "JT11398",
"CX11314", "MY16",    "LKC34",
"CB4856",  "MY23",    "EG4725")
ww_ls <- ggplot(ww_df_proc %>% dplyr::filter(trait == "ls")) +
aes(x=factor(strain, levels = median_ls_order), y=phenotype, fill=strain) +
scale_fill_manual(values = strain.colours) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = .25, shape = 21) +
labs(x="", y="WW_Lifespan") +
theme_bw() +
theme(legend.position = "none") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ww_hs <- ggplot(ww_df_proc %>% dplyr::filter(trait == "hs")) +
aes(x=factor(strain, levels = median_hs_order), y=phenotype, fill=strain) +
scale_fill_manual(values = strain.colours) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = .25, shape = 21) +
labs(x="", y="WW_Healthspan") +
theme_bw() +
theme(legend.position = "none") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
full_ww <- cowplot::plot_grid(ww_ls, ww_ls_h2_plot, ww_hs, ww_hs_h2_plot,
rel_widths = c(1, .25), ncol = 2, align = "vh", labels = c("A","", "B",""))
full_ww
ww_hs
ww_ls <- ggplot(ww_df_proc %>% dplyr::filter(trait == "ls")) +
aes(x=factor(strain, levels = median_ls_order), y=phenotype, fill=strain) +
scale_fill_manual(values = strain.colours) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = .25, shape = 21) +
labs(x="", y="WW_Lifespan") +
theme_bw() +
theme(legend.position = "none") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ww_ls
View(ww_df_proc)
ww_ls
install.packages("correlateR")
devtools::install_github("AEBilgrau/correlateR")
correlateR
tidyverse
devtools::install_github("AEBilgrau/correlateR")
packageVersion("rrBLUP")
install.packages("Sommer")
install.packages("sommer")
install_version("sommer", version = "3.5.0", repo = https://github.com/cran/sommer)
install_version("sommer", version = "3.5.0", repos = https://github.com/cran/sommer)
library(tidyverse)
library(geonames)
library(ggrepel)
library(maps)
library(geosphere)
library(FSA)
setwd(glue::glue("{dirname(rstudioapi::getActiveDocumentContext()$path)}/.."))
filter_box <- function(longitude, latitude, coords) {
between(longitude, coords[1], coords[3]) &
between(latitude, coords[2], coords[4]) &
!is.na(longitude)
}
scale_this <- function(x){
(x - mean(x, na.rm=TRUE)) / sd(x, na.rm=TRUE)
}
ancestry.colours <- c("A"="gold2", "B"="plum4","C"= "darkorange1",
"D"="lightskyblue2", "E"="firebrick","F"= "burlywood3", "G"="gray51",
"H"="springgreen4", "I"="lightpink2", "J"="deepskyblue4", "WHOLE_POPULATION"="black",
"K"="mediumpurple4","L"= "orange","M"= "maroon","N"= "yellow3","O"= "brown4",
"P"="yellow4", "Q"="sienna4", "R"="chocolate", "S"="gray19")
strain_islands <- c("XZ1514" = "#E69F00", "XZ1516" = "#E69F00","XZ1513" = "#E69F00","ECA372" = "#E69F00","ECA701" = "#E69F00","XZ1515" = "#E69F00",
"CB4856" = "#56B4E9",
"ECA369" = "#009E73","ECA738" = "#009E73",
"QX1792" = "#0072B2", "QX1794" = "#0072B2", "QX1793" = "#0072B2", "QX1791" = "#0072B2", "ECA740" = "#0072B2", "ECA741" = "#0072B2", "ECA363" = "#0072B2", "ECA743" = "#0072B2", "ECA742" = "#0072B2",
"ECA760" = "#CC79A7","ECA768" = "#CC79A7","ECA777" = "#CC79A7","ECA706" = "#CC79A7","ECA705" = "#CC79A7","ECA703" = "#CC79A7","ECA807" = "#CC79A7","ECA778" = "#CC79A7",
"ECA812" = "#CC79A7","ECA710" = "#CC79A7","ECA744" = "#CC79A7","ECA745" = "#CC79A7","ECA732" = "#CC79A7","ECA733" = "#CC79A7","ECA746" = "#CC79A7","DL238" = "#CC79A7",
"ECA347" = "#CC79A7","ECA730" = "#CC79A7","ECA724" = "#CC79A7","ECA722" = "#CC79A7","ECA189" = "#CC79A7","ECA191" = "#CC79A7","ECA723" = "#CC79A7","ECA712" = "#CC79A7",
"ECA396" = "#CC79A7")
data1 <- data.table::fread("data/Supplemental Data 1.tsv")
sample_names <- sort(data.table::fread("data/ANNOTATE_VCF/samples.txt", header = F) %>% dplyr::pull(V1))
hm_hi1 <- data1 %>%
dplyr::filter(!is.na(isotype)) %>%
dplyr::select(isotype,
strain,
c_label,
s_label,
substrate,
island,
altitude,
latitude,
longitude,
ambient_temperature,
substrate_temperature,
ambient_humidity,
substrate_moisture)
old_hi_isolates <- data.table::fread("data/WI_strain_list.csv") %>%
dplyr::filter(isotype %in% names(strain_islands) & !(isotype %in% hm_hi1$isotype)) %>%
dplyr::mutate(altitude = as.numeric(NA)) %>%
dplyr::mutate(longitude = as.numeric(longitude),
substrate_temperature = substrate_temp,
ambient_temperature = ambient_temp)
hm_hi2 <- full_join(hm_hi1, old_hi_isolates)
substrate_merge <- c("Fruit",
"Rotting fruit",
"Nut",
"Rotting nut",
"Rotting vegetable")
hm_hi3 <- hm_hi2 %>%
dplyr::ungroup() %>%
dplyr::mutate(substrate = ifelse(substrate %in% substrate_merge, "Fruit/nut/vegetable", substrate)) %>%
dplyr::mutate(substrate = ifelse(substrate %in% c("Rotting fungus"), "Fungus", substrate)) %>%
dplyr::mutate(substrate = ifelse(is.na(substrate), "Other", substrate)) %>%
dplyr::mutate(fixed_substrate = ifelse(substrate == "Fruit/nut/vegetable", "Fruit/nut/veg",
ifelse(substrate == "Rotting flower", "Flower",
ifelse(substrate == "Rotting fungus", "Fungus",
ifelse(substrate %in% c("Rotting wood",
"Rotting bark",
"Soil",
"Grass"),
"Other",substrate))))) %>%
dplyr::group_by(isotype) %>%
dplyr::mutate(main_substrate = names(sort(summary(as.factor(fixed_substrate)), decreasing=T))[1]) %>% # find most common factor in group
dplyr::ungroup()
options(geonamesUsername="katiesevans")
options(geonamesHost="api.geonames.org")
hm_hi4 <- hm_hi3 %>%
dplyr::ungroup() %>%
dplyr::rowwise() %>%
dplyr::mutate(altitude = ifelse(is.na(altitude),
geonames::GNsrtm3(latitude, longitude)$srtm3,
altitude)
) %>%
dplyr::ungroup() %>%
dplyr::mutate(altitude = ifelse(isotype %in% c("CB4856", "DL238"), NA, altitude))
hm_hi4$island <- "?"
hm_hi4[filter_box(hm_hi4$longitude, hm_hi4$latitude, c(-158.3617,21.1968,-157.5117,21.7931)), "island"] <- "Oahu"
hm_hi4[filter_box(hm_hi4$longitude, hm_hi4$latitude, c(-159.9362, 21.6523, -159.1782, 22.472)), "island"] <- "Kauai"
hm_hi4[filter_box(hm_hi4$longitude, hm_hi4$latitude, c(-157.327, 21.0328, -156.685, 21.2574)), "island"] <- "Molokai"
hm_hi4[filter_box(hm_hi4$longitude, hm_hi4$latitude, c(-156.7061, 20.4712, -155.9289, 21.0743)), "island"] <- "Maui"
hm_hi4[filter_box(hm_hi4$longitude, hm_hi4$latitude, c(-156.1346, 18.6619, -154.6985, 20.4492)), "island"] <- "Big Island"
hm_hi5 <- hm_hi4 %>%
dplyr::group_by(isotype) %>%
dplyr::mutate(main_island = names(sort(summary(as.factor(island)), decreasing=T))[1]) %>%
dplyr::ungroup()
hi_only_samples <- read.csv(file = "data/fulcrum/hawaii_isotypes.csv")
admix <- data.table::fread("data/ADMIXTURE/full/BEST_K/K11_Processed_Ancestry.tsv") %>%
dplyr::rename(isotype = samples) %>%
tidyr::gather(pop, frac_pop, - isotype) %>%
dplyr::group_by(isotype) %>%
dplyr::mutate(max_pop_frac = max(frac_pop)) %>%
dplyr::ungroup() %>%
dplyr::arrange(pop, max_pop_frac) %>%
dplyr::mutate(isotype = factor(isotype)) %>%
dplyr::group_by(isotype) %>%
dplyr::mutate(pop_assignment = ifelse(max_pop_frac == frac_pop, pop, NA)) %>%
dplyr::arrange(isotype, pop_assignment) %>%
tidyr::fill(pop_assignment) %>%
tidyr::spread(pop, frac_pop) %>%
dplyr::ungroup() %>%
dplyr::mutate(Hawaiian = ifelse(isotype %in% hi_only_samples$isotype, "TRUE", "FALSE"))
ass_stats <- left_join(hm_hi5, data1 %>% dplyr::filter(!is.na(isotype)) %>% dplyr::select(s_label, gridsect_number)) %>%
dplyr::filter(!is.na(isotype)) %>%
# Filter non-type strains from ECA189 isotype and ECA396 isotype
dplyr::mutate(filter = case_when(
isotype == "ECA189" & strain != "ECA189" ~ T,
isotype == "ECA396" & strain != "ECA396" ~ T)) %>%
dplyr::mutate(filter = ifelse(is.na(filter), F, filter)) %>%
dplyr::filter(filter == F) %>%
# Filter to distinct c_labels for each isotype
dplyr::distinct(c_label, isotype, .keep_all = TRUE)
ass_stats <- left_join(ass_stats, admix) %>%
group_by(c_label) %>%
# make artifical c_label for Hawaiian isotypes collected prior to 2017 trip
dplyr::mutate(c_label2 = as.character(ifelse(c_label == "", row_number(), c_label))) %>%
dplyr::ungroup() %>%
dplyr::mutate(c_label = c_label2)
ass_stats_cont <- ass_stats %>%
dplyr::select(lat = latitude, long = longitude,
c_label, gridsect_number, fixed_substrate, isotype, sub_pop = pop_assignment, altitude,
ambient_temperature, substrate_temperature, ambient_humidity, substrate_moisture) %>%
# Filter for one representative isotype from a c_label
dplyr::distinct(c_label, sub_pop, .keep_all = T) %>%
dplyr::mutate(sub_pop = factor(sub_pop)) %>%
#dplyr::group_by(grid_num) %>%
#dplyr::mutate(remove = ifelse(length))
tidyr::gather(env_par, value, -lat, -long, -c_label, -gridsect_number, -fixed_substrate, -isotype, -sub_pop)
ass_stats_long <- ass_stats %>%
dplyr::select(lat = latitude, long = longitude,
c_label, gridsect_number, fixed_substrate, isotype, sub_pop = pop_assignment, altitude,
ambient_temperature, substrate_temperature, ambient_humidity, substrate_moisture) %>%
tidyr::gather(env_par, value, -lat, -long, -c_label, -gridsect_number, -fixed_substrate, -isotype, -sub_pop) %>%
dplyr::group_by(sub_pop, env_par) %>%
dplyr::mutate(pop_par_mean_full = mean(value, na.rm = T)) %>%
dplyr::ungroup() %>%
dplyr::mutate(id = paste(lat,long,c_label,isotype))
pair <- apply(ass_stats_long %>%
dplyr::filter(env_par == "altitude") %>%
dplyr::distinct(c_label, .keep_all = T), # only need to compare c_labels for stats, not worried about retaining isotype, pop_assignment info
2, combn, m=2)
left_pair <- as.data.frame(pair[ c(TRUE,FALSE), ])
right_pair <- as.data.frame(pair[ !c(TRUE,FALSE), ])
colnames(right_pair) <- paste("r", colnames(right_pair), sep = "_")
dist <- cbind(left_pair,right_pair) %>%
# assign lat and long back to numeric
dplyr::mutate(lat = as.double(as.character(lat)),
long = as.double(as.character(long)),
r_lat = as.double(as.character(r_lat)),
r_long = as.double(as.character(r_long)),
grid_num = as.double(as.character(gridsect_number)),
r_grid_num = as.double(as.character(r_gridsect_number)),
gridsect3 = ifelse(gridsect_number == 3 & r_gridsect_number == 3, TRUE, FALSE)) %>%
# force dplyr to perform distHaversine function on rows
dplyr::rowwise() %>%
dplyr::mutate(distance = distHaversine(c(long, lat), c(r_long, r_lat)),
under20meters = ifelse(distance < 20, TRUE, FALSE),
under25meters = ifelse(distance < 25, TRUE, FALSE),
under50meters = ifelse(distance < 50, TRUE, FALSE),
under100meters = ifelse(distance < 100, TRUE, FALSE))
ggplot(dist) +
aes(x = distance,  fill = under25meters) +
#geom_point()
geom_histogram(binwidth = 1000)
dist_filter <- dist %>%
dplyr::filter(under20meters == TRUE) %>%
dplyr::select(c_label, r_c_label) %>%
tidyr::gather() %>%
dplyr::distinct(value) %>%
dplyr::rename(c_label = value)
ass_stats_cont_dist_filtered_1 <- ass_stats_cont %>%
#dplyr::mutate(sub_pop2 = as.factor(ifelse(sub_pop %in% c("F","H"), "non_admixed", "Hawaiian Admixed"))) %>%
dplyr::mutate(filter_20m = ifelse(c_label %in% dist_filter$c_label, TRUE, FALSE),
kalopa =filter_box(ass_stats_cont$long, ass_stats_cont$lat, c(-155.454909,20.02578,-155.430115,20.049951)),
volcano_1 =filter_box(ass_stats_cont$long, ass_stats_cont$lat, c(-155.2243537309,19.4221224043,-155.2216236884,19.424155)),
volcano_2 =filter_box(ass_stats_cont$long, ass_stats_cont$lat, c(-155.222287312,19.424165,-155.2195572695,19.4259669944)),
maui = ifelse(isotype %in% c("QX1793", "QX1794"), TRUE, FALSE),
kauai = ifelse(isotype %in% c("XZ1514", "XZ1515", "XZ1516"), TRUE, FALSE),
geo_cluster = case_when(kalopa == T ~ "kalopa",
volcano_1 == T ~ "volcano_1",
volcano_2 == T ~ "volcano_2",
maui == T ~ "maui",
kauai == T ~ "kauai")) %>%
dplyr::group_by(env_par, sub_pop, geo_cluster, filter_20m) %>%
dplyr::mutate(mean_value_20m = mean(value, na.rm = T)) %>%
dplyr::ungroup() %>%
dplyr::mutate(value_thinned = ifelse(filter_20m == TRUE, mean_value_20m, value))
ass_stats_long <- ass_stats_long %>%
dplyr::mutate(filtered = ifelse(c_label %in% dist_filter$c_label, 0, 1))
ass_stats_cont_dist_filtered <- ass_stats_cont_dist_filtered_1 %>%
dplyr::distinct(env_par, sub_pop, geo_cluster, value_thinned, .keep_all = T)
Dunn_list_dist_filtered <- list()
for (e in 1:length(unique(ass_stats_cont_dist_filtered$env_par))){
KM_df <- ass_stats_cont_dist_filtered %>%
dplyr::filter(env_par == (unique(ass_stats_cont_dist_filtered$env_par)[e]))
D_test <- dunnTest(KM_df$value_thinned ~ KM_df$sub_pop, method = "bonferroni")
Dunn_list_dist_filtered[[unique(ass_stats_cont_dist_filtered$env_par)[e]]] <- D_test
}
Dunn_list_dist_filtered
elevation_p <- ggplot(ass_stats_cont_dist_filtered %>% tidyr::spread(env_par, value_thinned)) +
aes(x = sub_pop, y = altitude) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(aes(x = sub_pop, y = altitude, fill = sub_pop), width = 0.25, size = 3, shape = 21) +
theme_bw() +
scale_fill_manual(values=c(ancestry.colours)) +
labs(y = "Elevation (m)", x = "") +
theme_bw() +
theme(legend.position="none",
plot.margin = unit(c(0,0,0,0), units = "cm"))
elevation_p
sub_temp_p <- ggplot(ass_stats_cont_dist_filtered %>% tidyr::spread(env_par, value_thinned)) +
aes(x = sub_pop, y = substrate_temperature) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(aes(x = sub_pop, y = substrate_temperature, fill = sub_pop), width = 0.25, size = 3, shape = 21) +
scale_fill_manual(values=c(ancestry.colours)) +
labs(y = "Substrate temperature (°C)", x = "") +
theme_bw() +
theme(legend.position="none",
plot.margin = unit(c(0,0,0,0), units = "cm"))
sub_temp_p
